package com.lzh.administrator.androidframe.GreenDAo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lzh.administrator.androidframe.GreenDAo.StationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION_BEAN".
*/
public class StationBeanDao extends AbstractDao<StationBean, Long> {

    public static final String TABLENAME = "STATION_BEAN";

    /**
     * Properties of entity TrainStationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pinyin = new Property(2, String.class, "pinyin", false, "PINYIN");
        public final static Property Pinyins = new Property(3, String.class, "pinyins", false, "PINYINS");
        public final static Property Stationcode = new Property(4, String.class, "stationcode", false, "STATIONCODE");
        public final static Property Firstpys = new Property(5, String.class, "firstpys", false, "FIRSTPYS");
    };


    public StationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PINYIN\" TEXT," + // 2: pinyin
                "\"PINYINS\" TEXT," + // 3: pinyins
                "\"STATIONCODE\" TEXT," + // 4: stationcode
                "\"FIRSTPYS\" TEXT);"); // 5: firstpys
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(3, pinyin);
        }
 
        String pinyins = entity.getPinyins();
        if (pinyins != null) {
            stmt.bindString(4, pinyins);
        }
 
        String stationcode = entity.getStationcode();
        if (stationcode != null) {
            stmt.bindString(5, stationcode);
        }
 
        String firstpys = entity.getFirstpys();
        if (firstpys != null) {
            stmt.bindString(6, firstpys);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StationBean readEntity(Cursor cursor, int offset) {
        StationBean entity = new StationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pinyins
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stationcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // firstpys
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPinyins(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStationcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstpys(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
